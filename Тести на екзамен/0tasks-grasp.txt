::Тестове завдання "GRASP: визначення”::
Виберіть принципи GRASP:
{
~%10%Information Expert
~%10%Creator
~%10%Controller
~%10%Low Coupling
~Liskov Substitution Principle
~%10%High Cohesion
~%10%Polymorphism
~Dependency Inversion
~%10%Pure Fabrication
~%10%Indirection
~Interface Segregation
~%10%Protected Variations 
~Open-Closed
}

::Тестове завдання "SOLID: визначення”::
Виберіть принципи SOLID:
{
~Information Expert
~%20%The Dependency Inversion
~Creator
~%20%Single Responsibility
~%20%Open-Closed 
~High Cohesion
~%20%Interface Segregation
~Polymorphism
~Indirection
~%20%Liskov Substitution
~Protected Variations
}

::Тестове завдання "GRASP Information Expert (Інформаційний експерт) переваги”::
Переваги принципу GRASP Information Expert (Інформаційний експерт):
{
~%50%Підтримує інкапсуляцію, тобто об'єкти використовують свої власні дані для виконання поставлених завдань
~Використання цього патерну не підвищує пов'язаності, оскільки створений клас, як правило, видно тільки для класу - творця. 
~%50%Поведінка системи забезпечується класами, що містять необхідну інформацію. 
~Зручність повторного використання
~Класи з високим ступенем зачеплення прості в підтримці і повторному використанні.
}

::Тестове завдання "GRASP Creator (Творець) переваги”::
Переваги принципу Creator (Творець):
{
~Підтримує інкапсуляцію, тобто об'єкти використовують свої власні дані для виконання поставлених завдань
=Використання цього патерну не підвищує пов'язаності, оскільки створений клас, як правило, видно тільки для класу - творця. 
~Поведінка системи забезпечується класами, що містять необхідну інформацію. 
~Зручність повторного використання
~Підтримується High Cohesion
~Класи з високим ступенем зачеплення прості в підтримці і повторному використанні.
}

::Тестове завдання "GRASP Low Coupling (Слабка зв'язаність)  переваги”::
Переваги принципу Low Coupling (Слабка зв'язаність):
{
~%50%Принципи роботи і функції класів / компонентів можна зрозуміти, не вивчаючи інші об'єкти
~Підтримує інкапсуляцію, тобто об'єкти використовують свої власні дані для виконання поставлених завдань
~%50%Зміна компонентів мало позначається на інших об'єктах 
~Підтримується High Cohesion
~Використання цього патерну не підвищує пов'язаності, оскільки створений клас, як правило, видно тільки для класу - творця. 
~Поведінка системи забезпечується класами, що містять необхідну інформацію. 
~Класи з високим ступенем зачеплення прості в підтримці і повторному використанні.
}

::Тестове завдання " CQRS: визначення”::
Виберіть принципи CQRS:
{
~Single Responsibility
~%25%Command 
~%25%Query 
~Creator
~Controller
~%25%Responsibility 
~%25%Segregation
}


::Тестове завдання "CQRS переваги”::
Переваги принципів CQRS:
{
~%25%Можливість розширювати та оптимізувати кожну з сторін додатку незалежно одна від одної
~Поведінка системи забезпечується класами, що містять необхідну інформацію. 
~%25%Розподіл роботи між окремими командами розробників
~Зручність повторного використання
~%25%Можливість створити інтерактивний, задачо-орієнтований користувацький інтерфейс
~Поведінка системи забезпечується класами, що містять необхідну інформацію. 
~%25%Використання однієї або різних баз даних
}
